require 'rack'
require 'adsf'
require 'launchy'

case RbConfig::CONFIG['target_os']
when /windows|bccwin|cygwin|djgpp|mingw|mswin|wince/i
  notification :gntp, :host => 'localhost'
when /linux/i
  notification :notifysend
when /mac|darwin/i
  notification :growl
end

guard 'bundler' do
  watch('Gemfile')
end

class WebServer
  DEFAULT_OPTIONS = {
    :host => '0.0.0.0',
    :port => 1234,
    :root => '.',
    :index_filenames => %w(index.html),
    :serve_as => '/'
    }

  def self.run(options)
    begin
      handler = ::Rack::Handler::Mongrel
    rescue LoadError
      handler = ::Rack::Handler::WEBrick
    end

    options = DEFAULT_OPTIONS.merge(options)

    app = Rack::Builder.new do
      map options[:serve_as] do
        use Adsf::Rack::IndexFileFinder,
          :root => options[:root],
          :index_filenames => options[:index_filenames]

        run Rack::File.new(options[:root])
      end
    end.to_app

    Thread.new {
      handler.run(app, :Port => options[:port], :Host => options[:host], :AccessLog => [])
    }

    handler
  end
end

class Build
  def self.generate_docs
    target = 'GenerateDocs'

    case RbConfig::CONFIG['target_os']
    when /windows|bccwin|cygwin|djgpp|mingw|mswin|wince/i
      %W(build.cmd #{target})
    else
      %W(./build.sh #{target})
    end
  end
end

guard :depend,
  # The path to the output generated by cmd. This can be a single value, an array or a callable returning any of both.
  output_paths: Proc.new { Dir['docs/output/**/*'] },

  # The command to run if the output is outdated or does not exist.
  cmd: Build.generate_docs,

  # Whether to run at startup.
  run_on_start: true do
    watch(%r{^docs/(content|files)/})

    @web_server = nil

    callback(:start_begin) {
      @web_server = WebServer.run({
        :serve_as => '/Paket/',
        :root => 'docs/output',
        :port => 3435
      })

      Launchy.open('http://localhost:3435/Paket/')
    }

    callback(:stop_begin) {
      @web_server.shutdown rescue nil
    }
end
